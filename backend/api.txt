# FashionX Backend API Endpoints

Base URL: http://localhost:5000/api

## Authentication Endpoints

### 1. User Registration
**POST** `/auth/signup`

**Headers:**
```
Content-Type: application/json
```

**Body:**
```json
{
  "firstName": "John",
  "lastName": "Doe",
  "email": "john.doe@example.com",
  "password": "password123"
}
```

**Response:**
```json
{
  "success": true,
  "message": "User registered successfully. Please check your email to verify your account.",
  "data": {
    "user": {
      "id": "user_id",
      "email": "john.doe@example.com",
      "firstName": "John",
      "lastName": "Doe",
      "fullName": "John Doe",
      "role": "user",
      "isEmailVerified": false,
      "createdAt": "2024-01-20T10:30:00.000Z"
    },
    "token": "jwt_token_here"
  }
}
```

---

### 2. User Login
**POST** `/auth/login`

**Headers:**
```
Content-Type: application/json
```

**Body:**
```json
{
  "email": "john.doe@example.com",
  "password": "password123",
  "otp": "123456"
}
```

**Response:**
```json
{
  "success": true,
  "message": "Login successful",
  "data": {
    "user": {
      "id": "user_id",
      "email": "john.doe@example.com",
      "firstName": "John",
      "lastName": "Doe",
      "fullName": "John Doe",
      "role": "user",
      "isEmailVerified": true,
      "lastLogin": "2024-01-20T10:35:00.000Z"
    },
    "token": "jwt_token_here"
  }
}
```

---

### 3. Email Verification
**POST** `/auth/verify-email`

**Headers:**
```
Content-Type: application/json
```

**Body:**
```json
{
  "email": "john.doe@example.com",
  "otp": "123456"
}
```

**Response:**
```json
{
  "success": true,
  "message": "Email verified successfully"
}
```

---

### 4. Request OTP
**POST** `/auth/request-otp`

**Headers:**
```
Content-Type: application/json
```

**Body:**
```json
{
  "email": "john.doe@example.com"
}
```

**Response:**
```json
{
  "success": true,
  "message": "OTP sent successfully"
}
```

---

### 5. Resend OTP
**POST** `/auth/resend-otp`

**Headers:**
```
Content-Type: application/json
```

**Body:**
```json
{
  "email": "john.doe@example.com"
}
```

**Response:**
```json
{
  "success": true,
  "message": "OTP resent successfully"
}
```

---

### 6. Forgot Password
**POST** `/auth/forgot-password`

**Headers:**
```
Content-Type: application/json
```

**Body:**
```json
{
  "email": "john.doe@example.com"
}
```

**Response:**
```json
{
  "success": true,
  "message": "Password reset email sent successfully"
}
```

---

### 6. Reset Password
**POST** `/auth/reset-password`

**Headers:**
```
Content-Type: application/json
```

**Body:**
```json
{
  "token": "reset_token_from_email",
  "password": "newpassword123"
}
```

**Response:**
```json
{
  "success": true,
  "message": "Password reset successfully"
}
```

---

### 7. Get Current User
**GET** `/auth/me`

**Headers:**
```
Authorization: Bearer jwt_token_here
```

**Response:**
```json
{
  "success": true,
  "data": {
    "user": {
      "id": "user_id",
      "email": "john.doe@example.com",
      "firstName": "John",
      "lastName": "Doe",
      "fullName": "John Doe",
      "role": "user",
      "isEmailVerified": true,
      "createdAt": "2024-01-20T10:30:00.000Z",
      "lastLogin": "2024-01-20T10:35:00.000Z"
    }
  }
}
```

---

### 8. Logout
**POST** `/auth/logout`

**Headers:**
```
Authorization: Bearer jwt_token_here
```

**Response:**
```json
{
  "success": true,
  "message": "Logged out successfully"
}
```

---

### 9. Update Profile
**PUT** `/auth/profile`

**Headers:**
```
Content-Type: application/json
Authorization: Bearer jwt_token_here
```

**Body:**
```json
{
  "firstName": "John Updated",
  "lastName": "Doe Updated"
}
```

**Response:**
```json
{
  "success": true,
  "message": "Profile updated successfully",
  "data": {
    "user": {
      "id": "user_id",
      "email": "john.doe@example.com",
      "firstName": "John Updated",
      "lastName": "Doe Updated",
      "fullName": "John Updated Doe Updated",
      "role": "user",
      "isEmailVerified": true
    }
  }
}
```

---

### 10. Change Password
**PUT** `/auth/change-password`

**Headers:**
```
Content-Type: application/json
Authorization: Bearer jwt_token_here
```

**Body:**
```json
{
  "currentPassword": "oldpassword123",
  "newPassword": "newpassword123"
}
```

**Response:**
```json
{
  "success": true,
  "message": "Password changed successfully"
}
```

---

## Error Responses

All endpoints may return error responses in the following format:

```json
{
  "success": false,
  "error": "Error message here"
}
```

**Common HTTP Status Codes:**
- 200: Success
- 201: Created (for registration)
- 400: Bad Request (validation errors)
- 401: Unauthorized (invalid token or credentials)
- 404: Not Found (user not found)
- 500: Internal Server Error

---

## Testing Email Verification Flow

1. **Register a new user** using `/auth/signup`
2. **Check your email** for verification link (check spam folder too)
3. **Extract the token** from the verification URL
4. **Verify email** using `/auth/verify-email` with the token
5. **Login** using `/auth/login` to confirm verification worked

## Testing Password Reset Flow

1. **Request password reset** using `/auth/forgot-password`
2. **Check your email** for reset link
3. **Extract the token** from the reset URL
4. **Reset password** using `/auth/reset-password` with token and new password
5. **Login** with new password to confirm reset worked

---

## Notes

- All timestamps are in ISO 8601 format
- JWT tokens expire in 7 days by default
- Email verification tokens expire in 24 hours
- Password reset tokens expire in 1 hour
- Replace `jwt_token_here` with actual JWT token received from login/signup
- Replace `verification_token_from_email` with actual token from email
- Replace `reset_token_from_email` with actual token from password reset email